This is a Data cleaning Project consisting of queries that allows one to filter out duplicates, blanks and reorganise a column into different ones and drop the ones that are not necessary.

use NashVille;

-- cleaning data

-- converting sale date

select SaleDate
from NashVille_Housing_Data;

update NashVille_Housing_Data
set SaleDate = str_to_date(SaleDate,'%M %d, %Y');


-- populate porperty address

select *
 from NashVille_Housing_Data
--  where PropertyAddress is not null;
order by ParcelID;


-- filtering blanks and duplicates

select a.ParcelID ,a.PropertyAddress, b.ParcelID,b.PropertyAddress 
,coalesce(a.PropertyAddress,b.PropertyAddress) as MergedPropAdd
from NashVille_Housing_Data a
join NashVille_Housing_Data b
on a.ParcelID=b.ParcelID
and a.UniqueID != b.UniqueID
where a.PropertyAddress is null;

UPDATE NashVille_Housing_Data a
JOIN NashVille_Housing_Data b
ON a.ParcelID = b.ParcelID
AND a.UniqueID != b.UniqueID
SET a.PropertyAddress = COALESCE(a.PropertyAddress, b.PropertyAddress)
WHERE a.PropertyAddress IS NULL;



-- breaking out address into individual columns (address,city,state)

select PropertyAddress
from NashVille_Housing_Data;

select substring(PropertyAddress,1 ,locate(',', PropertyAddress)-1) as Address,

substring(PropertyAddress,locate(',',PropertyAddress)+1,length(PropertyAddress)) as City

-- substring(PropertyAddress,locate(',',PropertyAddress)+2,length(PropertyAddress)) as State
from NashVille_Housing_Data;


alter table NashVille_Housing_Data
add PropertySplitAddress varchar(255);

update NashVille_Housing_Data
set PropertySplitAddress = substring(PropertyAddress,1 ,locate(',', PropertyAddress)-1);

alter table NashVille_Housing_Data
add PropertySplitCity varchar(255);

update NashVille_Housing_Data
set PropertySplitCity= substring(PropertyAddress,locate(',',PropertyAddress)+1,length(PropertyAddress));


select PropertySplitAddress,PropertySplitCity
from  NashVille_Housing_Data;

-- working with owner address and spliting it similarly,

select OwnerAddress from NashVille_Housing_Data;

select substring_index(OwnerAddress,',',1) as OwnerAddress,
substring_index(substring_index(OwnerAddress,',',-2),',',1) as OwnerCity,
substring_index(OwnerAddress,',',-1) as OwnerState
from NashVille_Housing_Data;

alter table NashVille_Housing_Data
add OwnerSplitAddress varchar(255);

alter table NashVille_Housing_Data
add OwnerSplitCity varchar(255);

alter table NashVille_Housing_Data
add OwnerSplitState varchar(255);

update NashVille_Housing_Data
set OwnerSplitAddress=substring_index(OwnerAddress,',',1);

update NashVille_Housing_Data
set OwnerSplitCity=substring_index(substring_index(OwnerAddress,',',-2),',',1);

update NashVille_Housing_Data
set OwnerSplitState=substring_index(OwnerAddress,',',-1);

select OwnerSplitAddress,OwnerSplitCity,OwnerSplitState
from NashVille_Housing_Data;


-- changing Y and N to Yes and No in SoldAsVacant Field

select distinct(SoldAsVacant), Count(SoldAsVacant) as valuecount
 from NashVille_Housing_Data
 group by SoldAsVacant
 order by 2;
 
 select SoldAsVacant,
 case
	when SoldAsVacant='Y' then 'Yes'
    when SoldAsVacant='N' then 'No'
    else SoldAsVacant
 end
from NashVille_Housing_Data;

update NashVille_Housing_Data set SoldAsVacant=
case
	when SoldAsVacant='Y' then 'Yes'
    when SoldAsVacant='N' then 'No'
    else SoldAsVacant
 end;



-- removing duplicates

-- select * from NashVille_Housing_Data;

with RowNumCTE as(
select * ,
row_number() over(
partition by ParcelID, PropertyAddress,SalePrice,SaleDate,LegalReference
order by UniqueID) row_num
from NashVille_Housing_Data
)

select * from RowNumCTE
where row_num>1;
-- order by PropertyAddress;


-- or another way to do it is as follows:-

WITH RowNumCTE AS (
    SELECT 
        UniqueID,  -- Primary Key to identify each row uniquely
        ROW_NUMBER() OVER (
            PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference 
            ORDER BY UniqueID
        ) AS row_num
    FROM NashVille_Housing_Data
)
SELECT * FROM RowNumCTE WHERE row_num > 1;



DELETE FROM NashVille_Housing_Data 
WHERE UniqueID IN (
    SELECT UniqueID FROM (
        SELECT UniqueID, ROW_NUMBER() OVER (
            PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference 
            ORDER BY UniqueID
        ) AS row_num
        FROM NashVille_Housing_Data
    ) AS subquery
    WHERE row_num > 1
);


-- delete unused columns

 select * from NashVille_Housing_Data;
 
alter table NashVille_Housing_Data
drop column OwnerAddress;

alter table NashVille_Housing_Data
drop column TaxDistrict;

alter table NashVille_Housing_Data
drop PropertyAddress;

alter table NashVille_Housing_Data
drop SaleDate;









